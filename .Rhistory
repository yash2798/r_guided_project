x=1
y<-2
3->z
## 3.1: Create a vector of the marks of 4 students
## use c() to store several values in one variable
marks<-c(14,26,28,30)
## 3.2: Check the data type of the vector
class(marks)
## 3.3: Check the length of the variable
length(marks)
## 3.4: Indexing and Slicing
## Returns the 4th mark
marks[4]
## Returns the 2nd, 3rd and 4th marks
marks[2:4]
marks[-2]
## 3.5: Create a character vector
char_vec<-c("a","b","c","d")
class(char_vec)
length(char_vec)
## 3.7 (Ex.): Retrieve the 1st, 2nd and 3rd characters in the char_vec vector
char_vec[1:3]
## 3.8: Create the variable char_num_vec to take numeric and character types
char_num_vec<-c("a","b",1,2)
## 3.9 (Ex.) : What do you think will be the data type of the vector?
class(char_num_vec)
## 3.10: Create a vector of odd numbers
sequence<-seq(from=1,to=14,by=2)
print(sequence)
# 4.1: Create matrix with values from marks, 2 rows and 2 columns
mat<-matrix(marks,nrow = 2,ncol = 2)
# Call the matrix created
mat
## 4.2: Change byrow to TRUE
mat2=matrix(marks,nrow = 2,ncol = 2,byrow = TRUE)
# Call the matrix created
mat2
print(sequence)
# 4.3: Create vector with 9 integers from 1 to 9
v<-c(seq(1,9,by=1))
class(v)
length(v)
print(v)
# 4.4: Access value on second row, second column
mat[2,2]
# 4.4: Access value on second row, second column
print(mat)
mat[2,2]
# 4.5: Access second row
mat[2,:]
mat3=matrix(v,nrow = 3,ncol = 3,byrow = TRUE)
# 4.4: Access value on second row, second column
print(mat3)
mat[2,2]
mat3[2,2]
# 4.4: Access value on second row, second column
print(mat3)
mat3[2,2]
# 4.5: Access second row
mat[2,:]
# 4.5: Access second row
mat[2,]
# 4.5: Access second row
mat3[2,]
mat3[,2]
# 4.7: Access sub-matrix with components on both
# first 2 rows and first 2 columns
sub_mat=mat3[1:2,1:2]
print(sub_mat)
# 4.8: Access sub-matrix with components that are
# not on 3rd row and 3rd column
mat[-3,-3]
# 4.8: Access sub-matrix with components that are
# not on 3rd row and 3rd column
mat3[-3,-3]
## 5.1: Create data frame with 2 columns: marks and char_vec
marks
char_vec
df<-data.frame(char_vec,marks)
class(df)     ## Look at data frame's overall type
df
## 5.2: Check the structure of each variable/feature in the data frame
str(df)
# 5.3: Look at columns' data types
class(df$char_vec)
class(df$marks)
# 5.4: Call a column in a data frame
df$marks
# OR
df[,1]
df1
df1<-df[1:3,]
df1
data <- data.frame(
Name = c("Olayinka", "Ayomikun", "Juliet"),
Age = c(24, 21, 19),
Height = c(1.67, 1.60, 1.66),
Salary = c(25000, 12000, 10000)
)
## Call the data frame
print(data)
class(data)  ## Check the data type
nrow(data)  # This returns the number of rows in the data frame
ncol(data)  # This returns the number of columns in the data frame
data1 <- data.frame(
Name = c("Daniel", "Yusuf"),
Age = c(23, 26),
Height = c(1.68, 1.69),
Salary = c(35000, 37000)
)
## 5.8: Use rbind and cbind to append new data to an existing dataset
rbind(data, data1)
## rbind - A row bind appends new values in row fashion
print(data)
## 5.8: Use rbind and cbind to append new data to an existing dataset
data<-rbind(data, data1)
## rbind - A row bind appends new values in row fashion
print(data)
## cbind - A column bind appends new values in column fashion
cbind(data,Gender)
## Create two new columns; Gender and LastName
Gender = c("M", "F", "F", "M", "M")
LastName = c("Arimoro", "Isijola", "James", "Akinbote", "Khalid")
## cbind - A column bind appends new values in column fashion
cbind(data,Gender)
## cbind - A column bind appends new values in column fashion
data<-cbind(data,Gender)
data<-cbind(data,LastName)
data
str(data)
# 6.1: Create a list with 4 objects
#List can hold any type of R objects
mat1
# 6.1: Create a list with 4 objects
#List can hold any type of R objects
mat
mat3
char_vec
ls<-list(mat,mat3,char_vec)
# 6.2: Accessing each object in the list
class(ls)
length(ls)
ls[1]
ls[1,2] #A matrix
ls[1:2] #A matrix
ls[3]
ls[3][1]
ls[[1:2]]#A matrix
ls[[1]]#A matrix
ls[3]
ls[[3]]
ls[[3][1]]
ls[[3]][1]
# 7.1: Install package on computer (from CRAN repository)
install.packages("readr")
# load package in R session
library(readr)
# 7.2: Install readxl package to machine
## install.packages("readxl")
install.packages("readxl")
pwd()
## Load in Rsession to use read_excel() fucntion
library(readxl)
getwd()
getwd()
# read.table() function to import .txt files
txt<-read.table("dataset.txt", header = TRUE)
## See all data
print(txt)
# read.table() function to import .txt files
txt<-read.table("dataset.txt", header = TRUE)
## See all data
print(txt)
# read.table() function to import .txt files
txt<-read.table("dataset.txt", header = TRUE)
# read.table() function to import .txt files
txt<-read.table("dataset.txt", header = TRUE)
View(txt)
## See first 5 rows
head(txt)
## See first 5 rows
head(txt,n=6)
## See first 5 rows
head(txt,n=5)
## See last rows
tail(txt,n=3)
## Check the structure of the data
str(txt)
## Check the summary of the data
summary(txt)
## Change column's type to character
## Sales column is overwritten by
## "character" version of Sales column
txt$Sales=as.character(txt$Sales)
summary(txt)
# read.table() function to import .txt files
# I will add a sep= "," for comma separated files
txt2<-read.table("Orange_comma_separated.txt",header=TRUE,sep=",")
## Check the summary of the data
View(txt2)
summary(txt2)
## Check the structure of the data
str(txt2)
#  Use read.csv() to import .csv files and explore it
cs1<-read.csv("diabetes.csv",header = TRUE)
class(cs1)
## (Ex.) Check the data type
View(cs1)
## (Ex.) Retrieve the first 5 rows
cs1[1:5,]
## (Ex.) Retrieve the first 5 rows
head(cs1,n=5)
## (Ex.) Check the number of rows and columns
nrow(cs1)
ncol(cs1)
## (Ex.) Check the structure of the data
str(cs1)
## (Ex.) Check the summary of the data
summary(cs1)
## Use read_excel() to import xlsx documents
xl<-read_excel("dataset.xlsx")
class(x1)
class(xl)
## Note: We can also use Rstudio interface
View(x1)
## Note: We can also use Rstudio interface
View(xl)
# Make the data a proper data frame object
xl<-as.data.frame(xl)
# Make the data a proper data frame object
xl<-as.data.frame(xl)
class(xl)
view(xl)
View(xl)
